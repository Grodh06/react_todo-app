{"version":3,"sources":["Utilits/ServerStroage/ServerStorageAPI.ts","Utilits/StorageContext.tsx","Components/StorageSelector/StorageSelector.tsx","Components/TodoAdd/TodoAdd.tsx","Utilits/MagicHelper.tsx","Utilits/SearchLink.tsx","Components/TodoFilters/TodosFilter.tsx","Components/TodoItem/TodoItem.tsx","Components/TodoList/TodoList.tsx","Components/TodoApp/TodoApp.tsx","Utilits/LocalStorage/LocalStorageAPI.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","fetch","response","ok","Error","status","statusText","json","addTodoServer","todo","method","headers","body","JSON","stringify","updateTodoServer","todoId","valuesToChange","deleteTodoServer","StorageContext","React","createContext","StorageSelector","storage","setStorage","history","createBrowserHistory","className","defaultValue","onChange","e","push","target","value","TodoAdd","addTodo","useState","title","setTitle","onSubmit","event","preventDefault","trim","length","type","placeholder","getSearchRequest","currentSearch","prevSearch","newSearch","URLSearchParams","toString","Object","entries","forEach","key","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","TodosFilters","completed","get","classNames","selected","TodoItem","updateTodo","clear","query","setQuery","prevQuery","setprevQuery","onEdit","setOnEdit","applyTitle","id","editing","checked","onDoubleClick","onClick","onKeyDown","onBlur","TodoList","visibleTodos","map","TodoApp","curentUrl","URL","document","pathname","includes","initalValue","undefined","window","item","localStorage","getItem","parse","storedValue","setValue","itemToSave","Function","setItem","useLocalStorage","localTodos","setLocalTodos","serverTodos","setServerTodos","updateServer","then","useEffect","timer","setInterval","clearInterval","usedTodos","filter","deleteTodo","deleteTodoLocal","onDeleteTodo","updateTodoLocal","changetTodo","find","MarkAll","every","Provider","newTodo","userId","Math","max","addTodoLocal","htmlFor","App","path","index","element","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ec6781e9.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getTodos = () => (request('/todos'));\n\nexport const addTodoServer = async (todo:{}) => {\n  const response = await fetch(`${BASE_URL}/todos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n    },\n    body: JSON.stringify(\n      todo,\n    ),\n  });\n\n  return response.json();\n};\n\nexport const updateTodoServer = async (\n  todoId: number,\n  valuesToChange: {},\n) => {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n    },\n    body: JSON.stringify(valuesToChange),\n  });\n\n  return response.json();\n};\n\nexport const deleteTodoServer = async (\n  todoId: number,\n) => {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n","import React from 'react';\n\nexport const StorageContext = React.createContext('local');\n","import { createBrowserHistory } from 'history';\n\ntype Props = {\n  storage: string\n  setStorage: (value: string) => void\n};\n\nexport const StorageSelector: React.FC<Props> = ({ storage, setStorage }) => {\n  const history = createBrowserHistory();\n  const changeStorage = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    history.push(`${e.target.value}`);\n    setStorage(e.target.value);\n  };\n\n  return (\n    <div className=\"select\">\n      <select\n        defaultValue={storage}\n        onChange={changeStorage}\n      >\n        <option\n          value=\"local\"\n        >\n          Local\n        </option>\n        <option\n          value=\"server\"\n        >\n          Server\n        </option>\n      </select>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\ntype Props = {\n  addTodo: (value: string) => void\n};\n\nexport const TodoAdd: React.FC<Props> = ({ addTodo }) => {\n  const [title, setTitle] = useState('');\n\n  const onAdd = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (title.trim().length > 0) {\n      addTodo(title);\n      setTitle('');\n    }\n  };\n\n  return (\n    <form onSubmit={onAdd}>\n      <input\n        type=\"text\"\n        data-cy=\"createTodo\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={title}\n        onChange={event => setTitle(event.target.value)}\n      />\n    </form>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchRequest(\n  currentSearch: URLSearchParams,\n  prevSearch: SearchParams,\n): string {\n  const newSearch = new URLSearchParams(currentSearch.toString());\n\n  Object.entries(prevSearch)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newSearch.delete(key);\n      } else if (Array.isArray(value)) {\n        newSearch.delete(key);\n        value.forEach(part => {\n          newSearch.append(key, part);\n        });\n      } else {\n        newSearch.set(key, value);\n      }\n    });\n\n  return newSearch.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchRequest, SearchParams } from './MagicHelper';\n\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nexport const SearchLink: React.FC<Props> = ({\n  children,\n  params,\n  ...props\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        search: getSearchRequest(searchParams, params),\n      }}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from '../../Utilits/SearchLink';\n\nexport const TodosFilters: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const completed = searchParams.get('completed');\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <SearchLink\n          params={{ completed: null }}\n          className={classNames({ selected: !completed })}\n        >\n          All\n        </SearchLink>\n      </li>\n\n      <li>\n        <SearchLink\n          params={{ completed: 'active' }}\n          className={classNames({ selected: completed === 'active' })}\n        >\n          Active\n        </SearchLink>\n      </li>\n\n      <li>\n        <SearchLink\n          params={{ completed: 'completed' }}\n          className={classNames({ selected: completed === 'completed' })}\n        >\n          Completed\n        </SearchLink>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../Types/Todo';\n\ntype Props = {\n  todo: Todo\n  updateTodo: (id: number, value: string | boolean) => void\n  clear: (id: number) => void\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  updateTodo,\n  clear,\n}) => {\n  const [query, setQuery] = useState(todo.title);\n  const [prevQuery, setprevQuery] = useState(query);\n  const [onEdit, setOnEdit] = useState(false);\n\n  const applyTitle = () => {\n    if (query.trim().length === 0) {\n      clear(todo.id);\n    } else {\n      setprevQuery(query);\n      updateTodo(todo.id, query);\n    }\n  };\n\n  const editTitle = (key: string) => {\n    if (key === 'Enter') {\n      applyTitle();\n      setOnEdit(false);\n    }\n\n    if (key === 'Escape') {\n      setQuery(prevQuery);\n      setOnEdit(false);\n    }\n  };\n\n  return (\n    <>\n      <li\n        className={classNames({ completed: todo.completed, editing: onEdit })}\n        id=\"test\"\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id=\"toggle-view\"\n            checked={todo.completed}\n            onChange={() => {\n              updateTodo(todo.id, !todo.completed);\n            }}\n          />\n          <label\n            onDoubleClick={() => setOnEdit(!onEdit)}\n          >\n            {prevQuery}\n          </label>\n          <button\n            aria-label=\"#toggle-view\"\n            type=\"button\"\n            className=\"destroy\"\n            data-cy=\"deleteTodo\"\n            onClick={() => clear(todo.id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n          onKeyDown={(event => editTitle(event.key))}\n          onBlur={(event) => {\n            event.preventDefault();\n            applyTitle();\n          }}\n        />\n      </li>\n    </>\n  );\n};\n","import { Todo } from '../../Types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  visibleTodos: Todo[]\n  updateTodo: (id: number, value: string | boolean) => void\n  clear: (id: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  visibleTodos,\n  updateTodo,\n  clear,\n}) => {\n  return (\n    <ul className=\"todo-list\" data-cy=\"todoList\">\n      {visibleTodos.map(todo => (\n        <TodoItem\n          todo={todo}\n          key={todo.id}\n          updateTodo={updateTodo}\n          clear={clear}\n        />\n      ))}\n    </ul>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Todo } from '../../Types/Todo';\nimport { useLocalStorage } from '../../Utilits/LocalStorage/LocalStorageAPI';\nimport {\n  addTodoServer,\n  deleteTodoServer,\n  getTodos,\n  updateTodoServer,\n} from '../../Utilits/ServerStroage/ServerStorageAPI';\nimport { StorageContext } from '../../Utilits/StorageContext';\nimport { StorageSelector } from '../StorageSelector/StorageSelector';\nimport { TodoAdd } from '../TodoAdd/TodoAdd';\nimport { TodosFilters } from '../TodoFilters/TodosFilter';\nimport { TodoList } from '../TodoList/TodoList';\n\nexport const TodoApp: React.FC = () => {\n  const curentUrl = new URL(document.URL).pathname.includes('server')\n    ? 'server'\n    : 'local';\n  const [storage, setStorage] = useState(curentUrl);\n  const [localTodos, setLocalTodos] = useLocalStorage<Todo[]>('todos', []);\n  const [serverTodos, setServerTodos] = useState<Todo[]>([]);\n  const [searchParams] = useSearchParams();\n  const completed = searchParams.get('completed');\n  const updateServer = async () => {\n    getTodos().then(setServerTodos);\n  };\n\n  useEffect(() => {\n    const timer = setInterval(updateServer, 500);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  useEffect(() => {\n    updateServer();\n  },\n  []);\n\n  const usedTodos = storage === 'local' ? localTodos : serverTodos;\n  const visibleTodos = [...usedTodos].filter(todo => {\n    switch (completed) {\n      case 'active':\n        return todo.completed === false;\n      case 'completed':\n        return todo.completed === true;\n\n      default:\n        return true;\n    }\n  });\n\n  const addTodoLocal = (title: string) => {\n    const newTodo = {\n      userId: 1,\n      title,\n      id: localTodos.length > 0\n        ? Math.max(...localTodos.map(todo => todo.id)) + 1\n        : 1,\n      completed: false,\n    };\n\n    setLocalTodos([newTodo, ...localTodos]);\n  };\n\n  const addTodo = (value: string) => {\n    if (storage === 'local') {\n      return addTodoLocal(value);\n    }\n\n    return addTodoServer(\n      {\n        userId: 1,\n        title: value,\n        completed: false,\n      },\n    );\n  };\n\n  const deleteTodoLocal = (value?: number) => {\n    if (!value) {\n      setLocalTodos(localTodos.filter(todo => todo.completed !== true));\n    } else {\n      setLocalTodos(localTodos.filter(todo => todo.id !== value));\n    }\n  };\n\n  const deleteTodo = (value? : number) => {\n    if (storage === 'local') {\n      deleteTodoLocal(value);\n    } else if (value) {\n      deleteTodoServer(value);\n    } else {\n      usedTodos.filter(todo => todo.completed === true)\n        .forEach(onDeleteTodo => deleteTodoServer(onDeleteTodo.id));\n    }\n  };\n\n  const updateTodoLocal = (id: number, value: string | boolean) => {\n    const changetTodo = localTodos.find(todo => todo.id === id);\n\n    if (!changetTodo) {\n      return;\n    }\n\n    if (typeof value === 'boolean') {\n      changetTodo.completed = value;\n    } else {\n      changetTodo.title = value;\n    }\n\n    setLocalTodos(localTodos.map(todo => {\n      if (todo.id === id) {\n        return changetTodo;\n      }\n\n      return todo;\n    }));\n  };\n\n  const updateTodo = (id: number, value: string | boolean) => {\n    if (storage === 'local') {\n      updateTodoLocal(id, value);\n    } else {\n      const updatedValue = typeof value === 'string'\n        ? { title: value }\n        : { completed: value };\n\n      updateTodoServer(id, updatedValue);\n    }\n  };\n\n  const localeMarkAllTodo = () => {\n    if (localTodos.every(todo => todo.completed === true)) {\n      localTodos.forEach(todo => updateTodoLocal(todo.id, false));\n    } else {\n      localTodos.forEach(todo => updateTodoLocal(todo.id, true));\n    }\n  };\n\n  const MarkAll = () => {\n    if (storage === 'local') {\n      localeMarkAllTodo();\n    } else if (usedTodos.every(todo => todo.completed === true)) {\n      usedTodos\n        .forEach(todo => updateTodoServer(todo.id, { completed: false }));\n    } else {\n      usedTodos.forEach(todo => updateTodoServer(todo.id, { completed: true }));\n    }\n  };\n\n  return (\n    <StorageContext.Provider value=\"\">\n      <StorageSelector storage={storage} setStorage={setStorage} />\n      <div className=\"todoapp\">\n        <header className=\"header\">\n          <h1>{`${storage} todos`}</h1>\n          <TodoAdd addTodo={addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            data-cy=\"toggleAll\"\n            onChange={() => {\n              MarkAll();\n            }}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            visibleTodos={visibleTodos}\n            updateTodo={updateTodo}\n            clear={deleteTodo}\n          />\n        </section>\n        {usedTodos.length !== 0\n        && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\" data-cy=\"todosCounter\">\n              {usedTodos.length}\n            </span>\n            <TodosFilters />\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => {\n                deleteTodo();\n              }}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n\n      </div>\n    </StorageContext.Provider>\n  );\n};\n","import { useState } from 'react';\n\nexport function useLocalStorage<T>(key: string, initalValue: T) {\n  const [storedValue, setValue] = useState<T>(() => {\n    if (typeof window === undefined) {\n      return initalValue;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item ? JSON.parse(item) : initalValue;\n    } catch {\n      return initalValue;\n    }\n  });\n\n  const saveToLS = (item: T | ((item: T) => T)) => {\n    const itemToSave = item instanceof Function ? item(storedValue) : item;\n\n    setValue(itemToSave);\n\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem(key, JSON.stringify(item));\n    }\n  };\n\n  return [storedValue, saveToLS] as const;\n}\n","import React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom/';\nimport { TodoApp } from './Components/TodoApp/TodoApp';\n\nexport const App: React.FC = () => {\n  return (\n    <Routes>\n      <Route path=\"/\">\n        <Route index element={<TodoApp />} />\n        <Route path=\":storage\" element={<TodoApp />} />\n      </Route>\n      <Route path=\"home\" element={<Navigate to=\"/\" />} />\n      <Route path=\"*\" element={<p>Page not found</p>} />\n    </Routes>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}