{"version":3,"sources":["Utilits/ServerStroage/ServerStorageAPI.ts","Utilits/StorageContext.tsx","Components/StorageSelector/StorageSelector.tsx","Components/TodoAdd/TodoAdd.tsx","Utilits/MagicHelper.tsx","Utilits/SearchLink.tsx","Components/TodoFilters/TodosFilter.tsx","Components/TodoItem/TodoItem.tsx","Components/TodoList/TodoList.tsx","Components/TodoApp/TodoApp.tsx","Utilits/LocalStorage/LocalStorageAPI.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","fetch","response","ok","Error","status","statusText","json","addTodoServer","todo","method","headers","body","JSON","stringify","updateTodoServer","todoId","valuesToChange","deleteTodoServer","StorageContext","React","createContext","StorageSelector","storage","className","classNames","selected","to","TodoAdd","addTodo","useState","title","setTitle","onSubmit","event","preventDefault","trim","length","type","placeholder","value","onChange","target","getSearchRequest","currentSearch","prevSearch","newSearch","URLSearchParams","toString","Object","entries","forEach","key","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","TodosFilters","completed","get","TodoItem","updateTodo","clear","query","setQuery","prevQuery","setprevQuery","onEdit","setOnEdit","applyTitle","id","editing","checked","onDoubleClick","onClick","onKeyDown","onBlur","TodoList","visibleTodos","map","TodoApp","pathname","useLocation","slice","setStorage","initalValue","undefined","window","item","localStorage","getItem","parse","storedValue","setValue","itemToSave","Function","setItem","useLocalStorage","localTodos","setLocalTodos","serverTodos","setServerTodos","updateServer","then","useEffect","timer","setInterval","clearInterval","usedTodos","filter","deleteTodo","deleteTodoLocal","onDeleteTodo","updateTodoLocal","changetTodo","find","MarkAll","every","Provider","newTodo","userId","Math","max","addTodoLocal","htmlFor","App","path","element","index","ReactDOM","render","document","getElementById"],"mappings":"qTAAO,IAAMA,EAAW,oCAEXC,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACEC,MAAM,GAAD,OAAIJ,GAAJ,OAAeE,IADtB,WACfG,EADe,QAGPC,GAHO,sBAIb,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAJ9B,gCAOdJ,EAASK,QAPK,2CAAH,sDAYPC,EAAa,uCAAG,WAAOC,GAAP,eAAAT,EAAA,sEACJC,MAAM,GAAD,OAAIJ,EAAJ,UAAsB,CAChDa,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UACTL,KAPuB,cACrBP,EADqB,yBAWpBA,EAASK,QAXW,2CAAH,sDAcbQ,EAAgB,uCAAG,WAC9BC,EACAC,GAF8B,eAAAjB,EAAA,sEAIPC,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBmB,GAAU,CAC1DN,OAAQ,QACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAUG,KATO,cAIxBf,EAJwB,yBAYvBA,EAASK,QAZc,2CAAH,wDAehBW,EAAgB,uCAAG,WAC9BF,GAD8B,eAAAhB,EAAA,sEAGPC,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBmB,GAAU,CAAEN,OAAQ,WAHxC,cAGxBR,EAHwB,yBAKvBA,EAASK,QALc,2CAAH,sDCzChBY,EAAiBC,IAAMC,cAAc,S,+BCMrCC,EAAmC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjD,OACE,sBAAKC,UAAU,UAAf,UACE,cAAC,IAAD,CACEA,UAAWC,IAAW,gBAAiB,CACrCC,SAAsB,WAAZH,IAEZI,GAAG,QAJL,mBAQA,cAAC,IAAD,CACEH,UAAWC,IAAW,gBAAiB,CACrCC,SAAsB,YAAZH,IAEZI,GAAG,SAJL,wBCbOC,EAA2B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACzC,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAUA,OACE,sBAAMC,SATM,SAACC,GACbA,EAAMC,iBACFJ,EAAMK,OAAOC,OAAS,IACxBR,EAAQE,GACRC,EAAS,MAKX,SACE,uBACEM,KAAK,OACL,UAAQ,aACRd,UAAU,WACVe,YAAY,yBACZC,MAAOT,EACPU,SAAU,SAAAP,GAAK,OAAIF,EAASE,EAAMQ,OAAOF,a,gBCrB1C,SAASG,EACdC,EACAC,GAEA,IAAMC,EAAY,IAAIC,gBAAgBH,EAAcI,YAgBpD,OAdAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXZ,EAAW,KACX,OAAVA,EACFM,EAAUO,OAAOD,GACRE,MAAMC,QAAQf,IACvBM,EAAUO,OAAOD,GACjBZ,EAAMW,SAAQ,SAAAK,GACZV,EAAUW,OAAOL,EAAKI,OAGxBV,EAAUY,IAAIN,EAAKZ,MAIlBM,EAAUE,W,4BCjBNW,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBACErC,GAAI,CACFsC,OAAQtB,EAAiBqB,EAAcH,KAErCC,GAJN,aAMGF,MChBMM,EAAyB,WACpC,MAAuBH,cACjBI,EADN,oBAC+BC,IAAI,aAEnC,OACE,qBAAI5C,UAAU,UAAd,UACE,6BACE,cAAC,EAAD,CACEqC,OAAQ,CAAEM,UAAW,MACrB3C,UAAWC,IAAW,CAAEC,UAAWyC,IAFrC,mBAQF,6BACE,cAAC,EAAD,CACEN,OAAQ,CAAEM,UAAW,UACrB3C,UAAWC,IAAW,CAAEC,SAAwB,WAAdyC,IAFpC,sBAQF,6BACE,cAAC,EAAD,CACEN,OAAQ,CAAEM,UAAW,aACrB3C,UAAWC,IAAW,CAAEC,SAAwB,cAAdyC,IAFpC,6BCpBKE,EAA4B,SAAC,GAInC,IAHL5D,EAGI,EAHJA,KACA6D,EAEI,EAFJA,WACAC,EACI,EADJA,MAEA,EAA0BzC,mBAASrB,EAAKsB,OAAxC,mBAAOyC,EAAP,KAAcC,EAAd,KACA,EAAkC3C,mBAAS0C,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA4B7C,oBAAS,GAArC,mBAAO8C,EAAP,KAAeC,EAAf,KAEMC,EAAa,WACW,IAAxBN,EAAMpC,OAAOC,OACfkC,EAAM9D,EAAKsE,KAEXJ,EAAaH,GACbF,EAAW7D,EAAKsE,GAAIP,KAgBxB,OACE,mCACE,qBACEhD,UAAWC,IAAW,CAAE0C,UAAW1D,EAAK0D,UAAWa,QAASJ,IAC5DG,GAAG,OAFL,UAIE,sBAAKvD,UAAU,OAAf,UACE,uBACEc,KAAK,WACLd,UAAU,SACVuD,GAAG,cACHE,QAASxE,EAAK0D,UACd1B,SAAU,WACR6B,EAAW7D,EAAKsE,IAAKtE,EAAK0D,cAG9B,uBACEe,cAAe,kBAAML,GAAWD,IADlC,SAGGF,IAEH,wBACE,aAAW,eACXpC,KAAK,SACLd,UAAU,UACV,UAAQ,aACR2D,QAAS,kBAAMZ,EAAM9D,EAAKsE,UAG9B,uBACEzC,KAAK,OACLd,UAAU,OACVgB,MAAOgC,EACP/B,SAAU,SAACP,GAAD,OAAWuC,EAASvC,EAAMQ,OAAOF,QAC3C4C,UAAY,SAAAlD,GAAK,MA7CX,WADKkB,EA8CoBlB,EAAMkB,OA5CzC0B,IACAD,GAAU,SAGA,WAARzB,IACFqB,EAASC,GACTG,GAAU,KARI,IAACzB,GA+CXiC,OAAQ,SAACnD,GACPA,EAAMC,iBACN2C,aCpECQ,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,aACAjB,EAEI,EAFJA,WACAC,EACI,EADJA,MAEA,OACE,oBAAI/C,UAAU,YAAY,UAAQ,WAAlC,SACG+D,EAAaC,KAAI,SAAA/E,GAAI,OACpB,cAAC,EAAD,CACEA,KAAMA,EAEN6D,WAAYA,EACZC,MAAOA,GAFF9D,EAAKsE,UCHPU,EAAoB,WAC/B,IAAQC,EAAaC,cAAbD,SACR,EAA8B5D,mBAAS4D,EAASE,MAAM,IAAM,SAA5D,mBAAOrE,EAAP,KAAgBsE,EAAhB,KACA,ECjBK,SAA4BzC,EAAa0C,GAC9C,MAAgChE,oBAAY,WAC1C,QAAsBiE,WAAXC,OACT,OAAOF,EAGT,IACE,IAAMG,EAAOD,OAAOE,aAAaC,QAAQ/C,GAEzC,OAAO6C,EAAOpF,KAAKuF,MAAMH,GAAQH,EACjC,SACA,OAAOA,MAVX,mBAAOO,EAAP,KAAoBC,EAApB,KAwBA,MAAO,CAACD,EAVS,SAACJ,GAChB,IAAMM,EAAaN,aAAgBO,SAAWP,EAAKI,GAAeJ,EAElEK,EAASC,GAEa,qBAAXP,QACTA,OAAOE,aAAaO,QAAQrD,EAAKvC,KAAKC,UAAUmF,MDJhBS,CAAwB,QAAS,IAArE,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsC9E,mBAAiB,IAAvD,mBAAO+E,EAAP,KAAoBC,EAApB,KACA,EAAuB/C,cACjBI,EADN,oBAC+BC,IAAI,aAC7B2C,EAAY,uCAAG,sBAAA/G,EAAA,sDTXQF,EAAQ,USYxBkH,KAAKF,GADG,2CAAH,qDAIlBG,qBAAU,WACR,IAAMC,EAAQC,YAAYJ,EAAc,KAExC,OAAO,kBAAMK,cAAcF,MAC1B,IAEHD,qBAAU,WACRF,MAEF,IAEAE,qBAAU,WACRpB,EAAWH,KACV,CAACA,IAEJ,IAAM2B,EAAwB,YAAZ9F,EAAwBsF,EAAcF,EAClDpB,EAAe,YAAI8B,GAAWC,QAAO,SAAA7G,GACzC,OAAQ0D,GACN,IAAK,SACH,OAA0B,IAAnB1D,EAAK0D,UACd,IAAK,YACH,OAA0B,IAAnB1D,EAAK0D,UAEd,QACE,OAAO,MAuCPoD,EAAa,SAAC/E,GACF,WAAZjB,EATkB,SAACiB,GAIrBoE,EAHGpE,EAGWmE,EAAWW,QAAO,SAAA7G,GAAI,OAAIA,EAAKsE,KAAOvC,KAFtCmE,EAAWW,QAAO,SAAA7G,GAAI,OAAuB,IAAnBA,EAAK0D,cAQ7CqD,CAAgBhF,GACPA,EACTtB,EAAiBsB,GAEjB6E,EAAUC,QAAO,SAAA7G,GAAI,OAAuB,IAAnBA,EAAK0D,aAC3BhB,SAAQ,SAAAsE,GAAY,OAAIvG,EAAiBuG,EAAa1C,QAIvD2C,EAAkB,SAAC3C,EAAYvC,GACnC,IAAMmF,EAAchB,EAAWiB,MAAK,SAAAnH,GAAI,OAAIA,EAAKsE,KAAOA,KAEnD4C,IAIgB,mBAAVnF,EACTmF,EAAYxD,UAAY3B,EAExBmF,EAAY5F,MAAQS,EAGtBoE,EAAcD,EAAWnB,KAAI,SAAA/E,GAC3B,OAAIA,EAAKsE,KAAOA,EACP4C,EAGFlH,QAwBLoH,EAAU,WACE,WAAZtG,EARAoF,EAAWmB,OAAM,SAAArH,GAAI,OAAuB,IAAnBA,EAAK0D,aAChCwC,EAAWxD,SAAQ,SAAA1C,GAAI,OAAIiH,EAAgBjH,EAAKsE,IAAI,MAEpD4B,EAAWxD,SAAQ,SAAA1C,GAAI,OAAIiH,EAAgBjH,EAAKsE,IAAI,MAO3CsC,EAAUS,OAAM,SAAArH,GAAI,OAAuB,IAAnBA,EAAK0D,aACtCkD,EACGlE,SAAQ,SAAA1C,GAAI,OAAIM,EAAiBN,EAAKsE,GAAI,CAAEZ,WAAW,OAE1DkD,EAAUlE,SAAQ,SAAA1C,GAAI,OAAIM,EAAiBN,EAAKsE,GAAI,CAAEZ,WAAW,QAIrE,OACE,eAAChD,EAAe4G,SAAhB,CAAyBvF,MAAM,GAA/B,UACE,cAAC,EAAD,CAAiBjB,QAASA,IAC1B,sBAAKC,UAAU,UAAf,UACE,yBAAQA,UAAU,SAAlB,UACE,uCAAQD,EAAQqE,MAAM,GAAtB,YACA,cAAC,EAAD,CAAS/D,QA5FD,SAACW,GACf,MAAgB,WAAZjB,EAde,SAACQ,GACpB,IAAMiG,EAAU,CACdC,OAAQ,EACRlG,QACAgD,GAAI4B,EAAWtE,OAAS,EACpB6F,KAAKC,IAAL,MAAAD,KAAI,YAAQvB,EAAWnB,KAAI,SAAA/E,GAAI,OAAIA,EAAKsE,QAAO,EAC/C,EACJZ,WAAW,GAGbyC,EAAc,CAACoB,GAAF,mBAAcrB,KAKlByB,CAAa5F,GAGfhC,EACL,CACEyH,OAAQ,EACRlG,MAAOS,EACP2B,WAAW,UAsFX,0BAAS3C,UAAU,OAAnB,UACE,uBACEc,KAAK,WACLyC,GAAG,aACHvD,UAAU,aACV,UAAQ,YACRiB,SAAU,WACRoF,OAGJ,uBAAOQ,QAAQ,aAAf,kCAEA,cAAC,EAAD,CACE9C,aAAcA,EACdjB,WAtDS,SAACS,EAAYvC,GACd,WAAZjB,EACFmG,EAAgB3C,EAAIvC,GAMpBzB,EAAiBgE,EAJqB,kBAAVvC,EACxB,CAAET,MAAOS,GACT,CAAE2B,UAAW3B,KAiDX+B,MAAOgD,OAGW,IAArBF,EAAUhF,QAET,yBAAQb,UAAU,SAAlB,UACE,sBAAMA,UAAU,aAAa,UAAQ,eAArC,SACG6F,EAAUhF,SAEb,cAAC,EAAD,IACA,wBACEC,KAAK,SACLd,UAAU,kBACV2D,QAAS,WACPoC,KAJJ,uCExLCe,EAAgB,WAC3B,OACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,WAAWC,QAAS,cAAC,EAAD,SAElC,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAU7G,GAAG,QACzC,cAAC,IAAD,CAAO4G,KAAK,IAAIC,QAAS,qD,kBCJ/BE,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ae572d1c.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getTodos = () => (request('/todos'));\n\nexport const addTodoServer = async (todo:{}) => {\n  const response = await fetch(`${BASE_URL}/todos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n    },\n    body: JSON.stringify(\n      todo,\n    ),\n  });\n\n  return response.json();\n};\n\nexport const updateTodoServer = async (\n  todoId: number,\n  valuesToChange: {},\n) => {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n    },\n    body: JSON.stringify(valuesToChange),\n  });\n\n  return response.json();\n};\n\nexport const deleteTodoServer = async (\n  todoId: number,\n) => {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n","import React from 'react';\n\nexport const StorageContext = React.createContext('local');\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport './StorageSelector.scss';\n\ntype Props = {\n  storage: string\n};\n\nexport const StorageSelector: React.FC<Props> = ({ storage }) => {\n  return (\n    <div className=\"storage\">\n      <Link\n        className={classNames('storage__link', {\n          selected: storage === '/local',\n        })}\n        to=\"local\"\n      >\n        Local\n      </Link>\n      <Link\n        className={classNames('storage__link', {\n          selected: storage === '/server',\n        })}\n        to=\"server\"\n      >\n        Server\n      </Link>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\ntype Props = {\n  addTodo: (value: string) => void\n};\n\nexport const TodoAdd: React.FC<Props> = ({ addTodo }) => {\n  const [title, setTitle] = useState('');\n\n  const onAdd = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (title.trim().length > 0) {\n      addTodo(title);\n      setTitle('');\n    }\n  };\n\n  return (\n    <form onSubmit={onAdd}>\n      <input\n        type=\"text\"\n        data-cy=\"createTodo\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={title}\n        onChange={event => setTitle(event.target.value)}\n      />\n    </form>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchRequest(\n  currentSearch: URLSearchParams,\n  prevSearch: SearchParams,\n): string {\n  const newSearch = new URLSearchParams(currentSearch.toString());\n\n  Object.entries(prevSearch)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newSearch.delete(key);\n      } else if (Array.isArray(value)) {\n        newSearch.delete(key);\n        value.forEach(part => {\n          newSearch.append(key, part);\n        });\n      } else {\n        newSearch.set(key, value);\n      }\n    });\n\n  return newSearch.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchRequest, SearchParams } from './MagicHelper';\n\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nexport const SearchLink: React.FC<Props> = ({\n  children,\n  params,\n  ...props\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        search: getSearchRequest(searchParams, params),\n      }}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from '../../Utilits/SearchLink';\n\nexport const TodosFilters: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const completed = searchParams.get('completed');\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <SearchLink\n          params={{ completed: null }}\n          className={classNames({ selected: !completed })}\n        >\n          All\n        </SearchLink>\n      </li>\n\n      <li>\n        <SearchLink\n          params={{ completed: 'active' }}\n          className={classNames({ selected: completed === 'active' })}\n        >\n          Active\n        </SearchLink>\n      </li>\n\n      <li>\n        <SearchLink\n          params={{ completed: 'completed' }}\n          className={classNames({ selected: completed === 'completed' })}\n        >\n          Completed\n        </SearchLink>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../Types/Todo';\n\ntype Props = {\n  todo: Todo\n  updateTodo: (id: number, value: string | boolean) => void\n  clear: (id: number) => void\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  updateTodo,\n  clear,\n}) => {\n  const [query, setQuery] = useState(todo.title);\n  const [prevQuery, setprevQuery] = useState(query);\n  const [onEdit, setOnEdit] = useState(false);\n\n  const applyTitle = () => {\n    if (query.trim().length === 0) {\n      clear(todo.id);\n    } else {\n      setprevQuery(query);\n      updateTodo(todo.id, query);\n    }\n  };\n\n  const editTitle = (key: string) => {\n    if (key === 'Enter') {\n      applyTitle();\n      setOnEdit(false);\n    }\n\n    if (key === 'Escape') {\n      setQuery(prevQuery);\n      setOnEdit(false);\n    }\n  };\n\n  return (\n    <>\n      <li\n        className={classNames({ completed: todo.completed, editing: onEdit })}\n        id=\"test\"\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id=\"toggle-view\"\n            checked={todo.completed}\n            onChange={() => {\n              updateTodo(todo.id, !todo.completed);\n            }}\n          />\n          <label\n            onDoubleClick={() => setOnEdit(!onEdit)}\n          >\n            {prevQuery}\n          </label>\n          <button\n            aria-label=\"#toggle-view\"\n            type=\"button\"\n            className=\"destroy\"\n            data-cy=\"deleteTodo\"\n            onClick={() => clear(todo.id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n          onKeyDown={(event => editTitle(event.key))}\n          onBlur={(event) => {\n            event.preventDefault();\n            applyTitle();\n          }}\n        />\n      </li>\n    </>\n  );\n};\n","import { Todo } from '../../Types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  visibleTodos: Todo[]\n  updateTodo: (id: number, value: string | boolean) => void\n  clear: (id: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  visibleTodos,\n  updateTodo,\n  clear,\n}) => {\n  return (\n    <ul className=\"todo-list\" data-cy=\"todoList\">\n      {visibleTodos.map(todo => (\n        <TodoItem\n          todo={todo}\n          key={todo.id}\n          updateTodo={updateTodo}\n          clear={clear}\n        />\n      ))}\n    </ul>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { Todo } from '../../Types/Todo';\nimport { useLocalStorage } from '../../Utilits/LocalStorage/LocalStorageAPI';\nimport {\n  addTodoServer,\n  deleteTodoServer,\n  getTodos,\n  updateTodoServer,\n} from '../../Utilits/ServerStroage/ServerStorageAPI';\nimport { StorageContext } from '../../Utilits/StorageContext';\nimport { StorageSelector } from '../StorageSelector/StorageSelector';\nimport { TodoAdd } from '../TodoAdd/TodoAdd';\nimport { TodosFilters } from '../TodoFilters/TodosFilter';\nimport { TodoList } from '../TodoList/TodoList';\n\nexport const TodoApp: React.FC = () => {\n  const { pathname } = useLocation();\n  const [storage, setStorage] = useState(pathname.slice(1) || 'local');\n  const [localTodos, setLocalTodos] = useLocalStorage<Todo[]>('todos', []);\n  const [serverTodos, setServerTodos] = useState<Todo[]>([]);\n  const [searchParams] = useSearchParams();\n  const completed = searchParams.get('completed');\n  const updateServer = async () => {\n    getTodos().then(setServerTodos);\n  };\n\n  useEffect(() => {\n    const timer = setInterval(updateServer, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  useEffect(() => {\n    updateServer();\n  },\n  []);\n\n  useEffect(() => {\n    setStorage(pathname);\n  }, [pathname]);\n\n  const usedTodos = storage === '/server' ? serverTodos : localTodos;\n  const visibleTodos = [...usedTodos].filter(todo => {\n    switch (completed) {\n      case 'active':\n        return todo.completed === false;\n      case 'completed':\n        return todo.completed === true;\n\n      default:\n        return true;\n    }\n  });\n\n  const addTodoLocal = (title: string) => {\n    const newTodo = {\n      userId: 1,\n      title,\n      id: localTodos.length > 0\n        ? Math.max(...localTodos.map(todo => todo.id)) + 1\n        : 1,\n      completed: false,\n    };\n\n    setLocalTodos([newTodo, ...localTodos]);\n  };\n\n  const addTodo = (value: string) => {\n    if (storage === '/local') {\n      return addTodoLocal(value);\n    }\n\n    return addTodoServer(\n      {\n        userId: 1,\n        title: value,\n        completed: false,\n      },\n    );\n  };\n\n  const deleteTodoLocal = (value?: number) => {\n    if (!value) {\n      setLocalTodos(localTodos.filter(todo => todo.completed !== true));\n    } else {\n      setLocalTodos(localTodos.filter(todo => todo.id !== value));\n    }\n  };\n\n  const deleteTodo = (value? : number) => {\n    if (storage === '/local') {\n      deleteTodoLocal(value);\n    } else if (value) {\n      deleteTodoServer(value);\n    } else {\n      usedTodos.filter(todo => todo.completed === true)\n        .forEach(onDeleteTodo => deleteTodoServer(onDeleteTodo.id));\n    }\n  };\n\n  const updateTodoLocal = (id: number, value: string | boolean) => {\n    const changetTodo = localTodos.find(todo => todo.id === id);\n\n    if (!changetTodo) {\n      return;\n    }\n\n    if (typeof value === 'boolean') {\n      changetTodo.completed = value;\n    } else {\n      changetTodo.title = value;\n    }\n\n    setLocalTodos(localTodos.map(todo => {\n      if (todo.id === id) {\n        return changetTodo;\n      }\n\n      return todo;\n    }));\n  };\n\n  const updateTodo = (id: number, value: string | boolean) => {\n    if (storage === '/local') {\n      updateTodoLocal(id, value);\n    } else {\n      const updatedValue = typeof value === 'string'\n        ? { title: value }\n        : { completed: value };\n\n      updateTodoServer(id, updatedValue);\n    }\n  };\n\n  const localeMarkAllTodo = () => {\n    if (localTodos.every(todo => todo.completed === true)) {\n      localTodos.forEach(todo => updateTodoLocal(todo.id, false));\n    } else {\n      localTodos.forEach(todo => updateTodoLocal(todo.id, true));\n    }\n  };\n\n  const MarkAll = () => {\n    if (storage === '/local') {\n      localeMarkAllTodo();\n    } else if (usedTodos.every(todo => todo.completed === true)) {\n      usedTodos\n        .forEach(todo => updateTodoServer(todo.id, { completed: false }));\n    } else {\n      usedTodos.forEach(todo => updateTodoServer(todo.id, { completed: true }));\n    }\n  };\n\n  return (\n    <StorageContext.Provider value=\"\">\n      <StorageSelector storage={storage} />\n      <div className=\"todoapp\">\n        <header className=\"header\">\n          <h1>{`${storage.slice(1)} todos`}</h1>\n          <TodoAdd addTodo={addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            data-cy=\"toggleAll\"\n            onChange={() => {\n              MarkAll();\n            }}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            visibleTodos={visibleTodos}\n            updateTodo={updateTodo}\n            clear={deleteTodo}\n          />\n        </section>\n        {usedTodos.length !== 0\n        && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\" data-cy=\"todosCounter\">\n              {usedTodos.length}\n            </span>\n            <TodosFilters />\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => {\n                deleteTodo();\n              }}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n\n      </div>\n    </StorageContext.Provider>\n  );\n};\n","import { useState } from 'react';\n\nexport function useLocalStorage<T>(key: string, initalValue: T) {\n  const [storedValue, setValue] = useState<T>(() => {\n    if (typeof window === undefined) {\n      return initalValue;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item ? JSON.parse(item) : initalValue;\n    } catch {\n      return initalValue;\n    }\n  });\n\n  const saveToLS = (item: T | ((item: T) => T)) => {\n    const itemToSave = item instanceof Function ? item(storedValue) : item;\n\n    setValue(itemToSave);\n\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem(key, JSON.stringify(item));\n    }\n  };\n\n  return [storedValue, saveToLS] as const;\n}\n","import React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom/';\nimport { TodoApp } from './Components/TodoApp/TodoApp';\n\nexport const App: React.FC = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<TodoApp />}>\n        <Route index element={<TodoApp />} />\n        <Route path=\":storage\" element={<TodoApp />} />\n      </Route>\n      <Route path=\"home\" element={<Navigate to=\"/\" />} />\n      <Route path=\"*\" element={<p>Page not found</p>} />\n    </Routes>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}