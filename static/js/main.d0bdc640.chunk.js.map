{"version":3,"sources":["Utilits/ServerStroage/ServerStorageAPI.ts","Utilits/StorageContext.tsx","Components/StorageSelector/StorageSelector.tsx","Components/TodoAdd/TodoAdd.tsx","Components/TodoFilters/TodosFilter.tsx","Components/TodoItem/TodoItem.tsx","Components/TodoList/TodoList.tsx","Components/TodoApp/TodoApp.tsx","Utilits/LocalStorage/LocalStorageAPI.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","fetch","response","ok","Error","status","statusText","json","addTodoServer","todo","method","headers","body","JSON","stringify","updateTodoServer","todoId","valuesToChange","deleteTodoServer","StorageContext","React","createContext","StorageSelector","storage","setStorage","className","value","onChange","event","target","TodoAdd","addTodo","useState","title","setTitle","onSubmit","preventDefault","trim","length","type","placeholder","TodosFilters","activeLink","isActive","to","TodoItem","updateTodo","clear","query","setQuery","prevQuery","setprevQuery","onEdit","setOnEdit","applyTitle","id","classNames","completed","editing","checked","onDoubleClick","onClick","onKeyDown","key","onBlur","TodoList","visibleTodos","map","TodoApp","pathname","useLocation","initalValue","undefined","window","item","localStorage","getItem","parse","storedValue","setValue","itemToSave","Function","setItem","useLocalStorage","localTodos","setLocalTodos","serverTodos","setServerTodos","updateServer","then","useEffect","timer","setInterval","clearInterval","usedTodos","filter","deleteTodo","deleteTodoLocal","forEach","onDeleteTodo","updateTodoLocal","changetTodo","find","MarkAll","every","Provider","newTodo","userId","Math","max","addTodoLocal","htmlFor","App","path","index","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0bdc640.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getTodos = () => (request('/todos'));\n\nexport const addTodoServer = async (todo:{}) => {\n  const response = await fetch(`${BASE_URL}/todos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n    },\n    body: JSON.stringify(\n      todo,\n    ),\n  });\n\n  return response.json();\n};\n\nexport const updateTodoServer = async (\n  todoId: number,\n  valuesToChange: {},\n) => {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n    },\n    body: JSON.stringify(valuesToChange),\n  });\n\n  return response.json();\n};\n\nexport const deleteTodoServer = async (\n  todoId: number,\n) => {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n","import React from 'react';\n\nexport const StorageContext = React.createContext('local');\n","type Props = {\n  storage: string\n  setStorage: (value: string) => void\n};\n\nexport const StorageSelector: React.FC<Props> = ({ storage, setStorage }) => {\n  return (\n    <div className=\"select\">\n      <select\n        value={storage}\n        onChange={(event) => setStorage(event.target.value)}\n      >\n        <option value=\"local\">Local</option>\n        <option value=\"server\">Server</option>\n      </select>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\ntype Props = {\n  addTodo: (value: string) => void\n};\n\nexport const TodoAdd: React.FC<Props> = ({ addTodo }) => {\n  const [title, setTitle] = useState('');\n\n  const onAdd = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (title.trim().length > 0) {\n      addTodo(title);\n      setTitle('');\n    }\n  };\n\n  return (\n    <form onSubmit={onAdd}>\n      <input\n        type=\"text\"\n        data-cy=\"createTodo\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={title}\n        onChange={event => setTitle(event.target.value)}\n      />\n    </form>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype ActiveLink = (isActive: { isActive: boolean }) => string;\nexport const TodosFilters: React.FC = () => {\n  const activeLink: ActiveLink = ({ isActive }) => (isActive ? 'selected' : '');\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <NavLink\n          to=\"/\"\n          className={activeLink}\n        >\n          All\n        </NavLink>\n      </li>\n\n      <li>\n        <NavLink\n          to=\"/active\"\n          className={activeLink}\n        >\n          Active\n        </NavLink>\n      </li>\n\n      <li>\n        <NavLink\n          to=\"/completed\"\n          className={activeLink}\n        >\n          Completed\n        </NavLink>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../Types/Todo';\n\ntype Props = {\n  todo: Todo\n  updateTodo: (id: number, value: string | boolean) => void\n  clear: (id: number) => void\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  updateTodo,\n  clear,\n}) => {\n  const [query, setQuery] = useState(todo.title);\n  const [prevQuery, setprevQuery] = useState(query);\n  const [onEdit, setOnEdit] = useState(false);\n\n  const applyTitle = () => {\n    setprevQuery(query);\n    updateTodo(todo.id, query);\n  };\n\n  const editTitle = (key: string) => {\n    if (key === 'Enter') {\n      applyTitle();\n      setOnEdit(false);\n    }\n\n    if (key === 'Escape') {\n      setQuery(prevQuery);\n      setOnEdit(false);\n    }\n  };\n\n  return (\n    <>\n      <li\n        className={classNames({ completed: todo.completed, editing: onEdit })}\n        id=\"test\"\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id=\"toggle-view\"\n            checked={todo.completed}\n            onChange={() => {\n              updateTodo(todo.id, !todo.completed);\n            }}\n          />\n          <label\n            onDoubleClick={() => setOnEdit(!onEdit)}\n          >\n            {prevQuery}\n          </label>\n          <button\n            aria-label=\"#toggle-view\"\n            type=\"button\"\n            className=\"destroy\"\n            data-cy=\"deleteTodo\"\n            onClick={() => clear(todo.id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n          onKeyDown={(event => editTitle(event.key))}\n          onBlur={(event) => {\n            event.preventDefault();\n            applyTitle();\n          }}\n        />\n      </li>\n    </>\n  );\n};\n","import { Todo } from '../../Types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  visibleTodos: Todo[]\n  updateTodo: (id: number, value: string | boolean) => void\n  clear: (id: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  visibleTodos,\n  updateTodo,\n  clear,\n}) => {\n  return (\n    <ul className=\"todo-list\" data-cy=\"todoList\">\n      {visibleTodos.map(todo => (\n        <TodoItem\n          todo={todo}\n          key={todo.id}\n          updateTodo={updateTodo}\n          clear={clear}\n        />\n      ))}\n    </ul>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Todo } from '../../Types/Todo';\nimport { useLocalStorage } from '../../Utilits/LocalStorage/LocalStorageAPI';\nimport {\n  addTodoServer,\n  deleteTodoServer,\n  getTodos,\n  updateTodoServer,\n} from '../../Utilits/ServerStroage/ServerStorageAPI';\nimport { StorageContext } from '../../Utilits/StorageContext';\nimport { StorageSelector } from '../StorageSelector/StorageSelector';\nimport { TodoAdd } from '../TodoAdd/TodoAdd';\nimport { TodosFilters } from '../TodoFilters/TodosFilter';\nimport { TodoList } from '../TodoList/TodoList';\n\nexport const TodoApp: React.FC = () => {\n  const [storage, setStorage] = useState('local');\n  const { pathname } = useLocation();\n  const [localTodos, setLocalTodos] = useLocalStorage<Todo[]>('todos', []);\n  const [serverTodos, setServerTodos] = useState<Todo[]>([]);\n\n  const updateServer = async () => {\n    getTodos().then(setServerTodos);\n  };\n\n  useEffect(() => {\n    const timer = setInterval(updateServer, 500);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  useEffect(() => {\n    updateServer();\n  },\n  []);\n\n  const usedTodos = storage === 'local' ? localTodos : serverTodos;\n\n  const visibleTodos = [...usedTodos].filter(todo => {\n    switch (pathname) {\n      case '/active':\n        return todo.completed === false;\n      case '/completed':\n        return todo.completed === true;\n\n      default:\n        return true;\n    }\n  });\n\n  const addTodoLocal = (title: string) => {\n    const newTodo = {\n      userId: 1,\n      title,\n      id: localTodos.length > 0\n        ? Math.max(...localTodos.map(todo => todo.id)) + 1\n        : 1,\n      completed: false,\n    };\n\n    setLocalTodos([newTodo, ...localTodos]);\n  };\n\n  const addTodo = (value: string) => {\n    if (storage === 'local') {\n      return addTodoLocal(value);\n    }\n\n    return addTodoServer(\n      {\n        userId: 1,\n        title: value,\n        completed: false,\n      },\n    );\n  };\n\n  const deleteTodoLocal = (value?: number) => {\n    if (!value) {\n      setLocalTodos(localTodos.filter(todo => todo.completed !== true));\n    } else {\n      setLocalTodos(localTodos.filter(todo => todo.id !== value));\n    }\n  };\n\n  const deleteTodo = (value? : number) => {\n    if (storage === 'local') {\n      deleteTodoLocal(value);\n    } else if (value) {\n      deleteTodoServer(value);\n    } else {\n      usedTodos.filter(todo => todo.completed === true)\n        .forEach(onDeleteTodo => deleteTodoServer(onDeleteTodo.id));\n    }\n  };\n\n  const updateTodoLocal = (id: number, value: string | boolean) => {\n    const changetTodo = localTodos.find(todo => todo.id === id);\n\n    if (!changetTodo) {\n      return;\n    }\n\n    if (typeof value === 'boolean') {\n      changetTodo.completed = value;\n    } else {\n      changetTodo.title = value;\n    }\n\n    setLocalTodos(localTodos.map(todo => {\n      if (todo.id === id) {\n        return changetTodo;\n      }\n\n      return todo;\n    }));\n  };\n\n  const updateTodo = (id: number, value: string | boolean) => {\n    if (storage === 'local') {\n      updateTodoLocal(id, value);\n    } else {\n      const updatedValue = typeof value === 'string'\n        ? { title: value }\n        : { completed: value };\n\n      updateTodoServer(id, updatedValue);\n    }\n  };\n\n  const localeMarkAllTodo = () => {\n    if (localTodos.every(todo => todo.completed === true)) {\n      localTodos.forEach(todo => updateTodoLocal(todo.id, false));\n    } else {\n      localTodos.forEach(todo => updateTodoLocal(todo.id, true));\n    }\n  };\n\n  const MarkAll = () => {\n    if (storage === 'local') {\n      localeMarkAllTodo();\n    } else if (usedTodos.every(todo => todo.completed === true)) {\n      usedTodos\n        .forEach(todo => updateTodoServer(todo.id, { completed: false }));\n    } else {\n      usedTodos.forEach(todo => updateTodoServer(todo.id, { completed: true }));\n    }\n  };\n\n  return (\n    <StorageContext.Provider value=\"\">\n      <StorageSelector storage={storage} setStorage={setStorage} />\n      <div className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoAdd addTodo={addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            data-cy=\"toggleAll\"\n            onChange={() => {\n              MarkAll();\n            }}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            visibleTodos={visibleTodos}\n            updateTodo={updateTodo}\n            clear={deleteTodo}\n          />\n        </section>\n        {usedTodos.length !== 0\n        && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\" data-cy=\"todosCounter\">\n              {usedTodos.length}\n            </span>\n            <TodosFilters />\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => {\n                deleteTodo();\n              }}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n\n      </div>\n    </StorageContext.Provider>\n  );\n};\n","import { useState } from 'react';\n\nexport function useLocalStorage<T>(key: string, initalValue: T) {\n  const [storedValue, setValue] = useState<T>(() => {\n    if (typeof window === undefined) {\n      return initalValue;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item ? JSON.parse(item) : initalValue;\n    } catch {\n      return initalValue;\n    }\n  });\n\n  const saveToLS = (item: T | ((item: T) => T)) => {\n    const itemToSave = item instanceof Function ? item(storedValue) : item;\n\n    setValue(itemToSave);\n\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem(key, JSON.stringify(item));\n    }\n  };\n\n  return [storedValue, saveToLS] as const;\n}\n","import React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom/';\nimport { TodoApp } from './Components/TodoApp/TodoApp';\n\nexport const App: React.FC = () => {\n  return (\n    <Routes>\n      <Route path=\"/\">\n        <Route index element={<TodoApp />} />\n        <Route path=\"active\" element={<TodoApp />} />\n        <Route path=\"completed\" element={<TodoApp />} />\n      </Route>\n      <Route path=\"home\" element={<Navigate to=\"/\" />} />\n      <Route path=\"*\" element={<p>Page not found</p>} />\n    </Routes>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}